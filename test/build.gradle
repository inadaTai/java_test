plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.flywaydb.flyway' version '8.0.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.graphhopper.external:jackson-datatype-jts:1.0-2.7'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.flywaydb:flyway-core'	
	implementation 'mysql:mysql-connector-java:8.0.12'
	//twitterのapiで利用してるライブラリ(ダミーデータ投入シーダーなどで利用)
	implementation 'com.twitter:twitter-api-java-sdk:2.0.3'
	//faker(ダミーデータ投入シーダーなどで利用)
	//@see https://github.com/DiUS/java-faker/issues/327
	implementation ('com.github.javafaker:javafaker:1.0.2') { exclude module: 'snakeyaml' }
	implementation group: 'org.yaml', name: 'snakeyaml', version: '1.17'
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// implementation 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	implementation 'org.flywaydb:flyway-mysql'
}

flyway {
	url = 'jdbc:mysql://mysql/java_test?useSSL=false'
    user = 'user'
    password = 'pass'
    locations = ["classpath:db/migration"]
}

tasks.named('test') {
	useJUnitPlatform()
}

jar { // plan.jarは出力しない
	enabled = false
}

bootJar { // archiveFileNameで一項目にまとめることもできる
	archiveBaseName = "test"
	version = "0.0.1"
	archiveClassifier = 'SNAPSHOT'
	archiveExtension = 'jar'
}

bootRun { //debug用にgradleからJVMへ引数を渡す
	systemProperties = System.properties // gradleのシステムプロパティをjavaに渡す
	// 上記の記述で、以下の引数がjdkに渡される
	jvmArgs=["-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8080"]
}

task migrateRollback() {
	doLast {
		//ロールバックしたいステップ数を指定する。(指定がない場合は最後のマイグレーションだけ削除)
		def stepParam = 1
		if (project.hasProperty('stepParam')) {
			stepParam = project.getProperty('stepParam')
		}

		def driverClassName = 'com.mysql.cj.jdbc.Driver'
		def url = 'jdbc:mysql://mysql/java_test'
		def user = 'user'
		def password = 'pass'

		Class.forName(driverClassName);
		def conn = DriverManager.getConnection(url, user, password)
		def stmt = conn.createStatement()
		stmt.execute("DELETE FROM flyway_schema_history ORDER BY version DESC LIMIT ${stepParam};")
		stmt.close()
		conn.close()

		println "The users table has been dropped successfully."
	}
}